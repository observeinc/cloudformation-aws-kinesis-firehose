AWSTemplateFormatVersion: "2010-09-09"
Description: Observe Kinesis Firehose Delivery Stream

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Required parameters'
      Parameters:
      - ObserveCustomer
      - ObserveToken
    - Label:
        default: 'Configuration parameters'
      Parameters:
      - HttpEndpointBufferingInterval
      - HttpEndpointBufferingSize
      - HttpEndpointRetryDuration
      - FailedDataBucketExpirationInDays
      - LogGroupExpirationInDays
      - ObserveDomain

Parameters:
  ObserveCustomer:
    Type: String
    Description: Observe Customer ID
  ObserveToken:
    Type: String
    NoEcho: true
    Description: Observe Ingest Token
    AllowedPattern: '\S+'
    ConstraintDescription: 'Token cannot contain spaces'
  ObserveDomain:
    Type: String
    Default: observeinc.com
    Description: Observe domain to submit data to
  HttpEndpointBufferingInterval:
    Type: Number
    Default: 60
    MinValue: 60
    MaxValue: 900
    Description: |
      Buffer incoming data for the specified period of time, in seconds, before
      delivering it to the destination.
  HttpEndpointBufferingSize:
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 64
    Description: |
      Buffer incoming data to the specified size, in MiBs, before delivering it
      to the destination.
  HttpEndpointRetryDuration:
    Type: Number
    Default: 90
    MinValue: 0
    MaxValue: 7200
    Description: |
      The total amount of time that Kinesis Data Firehose spends on retries. This
      duration starts after the initial attempt to send data to the custom
      destination via HTTPS endpoint fails. It doesn't include the periods during
      which Kinesis Data Firehose waits for acknowledgment from the specified
      destination after each attempt.
  FailedDataBucketExpirationInDays:
    Type: Number
    Default: 30
    AllowedValues:
    - 1
    - 3
    - 7
    - 14
    - 30
    - 90
    Description: |
      Expiration to set for failed data stored in S3 bucket.
  LogGroupExpirationInDays:
    Type: Number
    Default: 365
    AllowedValues:
      - 1
      - 3
      - 7
      - 14
      - 30
      - 90
      - 365
    Description: |
      Expiration to set on log groups
Resources:
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/firehose/
          - !Ref 'AWS::StackName'
      RetentionInDays: !Ref LogGroupExpirationInDays
  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      HttpEndpointDestinationConfiguration:
        RoleARN: !GetAtt Role.Arn
        BufferingHints:
          IntervalInSeconds: !Ref HttpEndpointBufferingInterval
          SizeInMBs: !Ref HttpEndpointBufferingSize
        EndpointConfiguration:
          AccessKey: !Sub '${ObserveToken}'
          Name: Observe delivery endpoint
          Url: !Sub 'https://${ObserveCustomer}.collect.${ObserveDomain}/v1/kinesis'
        RequestConfiguration:
          ContentEncoding: GZIP
        RetryOptions:
          DurationInSeconds: !Ref HttpEndpointRetryDuration
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref LogGroup
          LogStreamName: "HttpEndpointDelivery"
        S3BackupMode: FailedDataOnly
        S3Configuration:
          BucketARN: !GetAtt FailedDataBucket.Arn
          RoleARN: !GetAtt Role.Arn
          CloudWatchLoggingOptions:
            Enabled: true
            LogGroupName: !Ref LogGroup
            LogStreamName: "S3Delivery"
  FailedDataBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref Role
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !GetAtt FailedDataBucket.Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref FailedDataBucket
                  - '*'

  CloudWatchPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref Role
      PolicyName: firehose_logging_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !GetAtt LogGroup.Arn

  FailedDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: !Ref FailedDataBucketExpirationInDays
            Status: Enabled

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  CloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - logs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                Resource: !GetAtt 'DeliveryStream.Arn'
      Description: Role to use Observe Firehose from CloudWatch Logs
  LogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !GetAtt 'DeliveryStream.Arn'
      FilterPattern: ''
      LogGroupName: !Ref 'LogGroup'
      RoleArn: !GetAtt 'CloudWatchLogsRole.Arn'
Outputs:
  FirehoseARN:
    Description: 'Firehose ARN'
    Value: !GetAtt 'DeliveryStream.Arn'
    Export:
      Name: !Sub '${AWS::StackName}:firehose:arn'
  CloudWatchLogsRole:
    Description: 'Role ARN to use for CloudWatch Logs subscriptions'
    Value: !GetAtt 'CloudWatchLogsRole.Arn'
    Export:
      Name: !Sub '${AWS::StackName}:logs:role:arn'
